/*  
 *  Plantissime Web Client 
 *
 *  Title       :  Plantissime Application
 *  Description : 
 *  Year        :  2015
 */
var plantiApp = angular.module('PlantissimeApp', [
	'ui.router',
	'planti.controllers',
	'planti.directives',
  'planti.services',
  'planti.filters',
  'lbServices'
]);

// Namespaces
var planti = {};
planti.controllers = angular.module('planti.controllers', ["chart.js"]);
planti.directives = angular.module('planti.directives', []);
planti.services = angular.module('planti.services', ['ngResource']);
planti.filters = angular.module('planti.filters', []);

plantiApp.config(function ($stateProvider, $urlRouterProvider) {
  //
  // For any unmatched url, redirect to /home
  $urlRouterProvider.otherwise("/home");
  //
  // Now set up the states
  $stateProvider
    .state('home', {
      url: '/home',
      templateUrl: 'views/home.html',
      controller: 'HomeController'
    })
    .state('plants', {
      url: '/plants',
      templateUrl: 'views/plant-list.html',
      controller: 'PlantsController'
    })
    .state('plantsDetail', {
      url: '/{plantId:[0-9]{1,4}}',
			templateUrl: 'views/plant-detail.html',
			controller: 'PlantDetailController'
    })
    .state('settings', {
			url: '/settings',
			templateUrl: 'views/settings.html',
			controller: 'SettingsController'
    });
});

/// <reference path="../../typings/jquery/jquery.d.ts"/>
$(document).ready(function () {
  $('#part-content').width($('#part-content').parent().width()-130);
	$( window ).resize(function() {
		$('#part-content').width($('#part-content').parent().width()-130);
	});
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  HomeController
 *  Description :
 *  Year        :  2015
 */
planti.controllers.controller('HomeController', function ($scope, $http, $interval) {
  $scope.section = "home";
  $scope.home = true;
  
  $scope.currentDate = new Date();
  
  $interval(function() {
    $scope.currentDate = new Date();
  }, 1000);
  
  $http.get('/api/events?filter[where][level]=1&filter[order]=time DESC&filter[limit]=10&filter[include]=target')
    .success(function(data) {
      $scope.events = data;
      console.log(data);
  });  
  $http.get('/api/events?filter[where][and][0][level]=2&filter[where][and][1][expiredAt]=null&filter[order]=time DESC&filter[limit]=10&filter[include]=target')
    .success(function(data) {
      $scope.alerts = data;
  });
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  PlantDetailController
 *  Description :
 *  Year        :  2015
 */
planti.controllers.controller('PlantDetailController', function ($scope, $http, $stateParams, $interval, Plant, Event) {

  // Function to load/reload plant data
  $scope.refresh = function() {
    // Load plant data  
    $scope.plant = Plant.findById({ id: $stateParams.plantId, filter: { include: 'classification' } });
    
    // Load events
    Event.find({ filter: { where: { level: 1, targetType: 'Plant', targetId: $stateParams.plantId }, order: "time DESC", limit: 10}}).$promise.then(function(results) {
      console.log(results);
      $scope.events = results;
    });
    
    // Load alerts
    Event.find({ filter: { where: { level: 2, targetType: 'Plant', targetId: $stateParams.plantId, expiredAt: null }, order: "time ASC", limit: 10}}).$promise.then(function(results) {
      console.log(results);
      $scope.alerts = results;
    });
  };

  // Set default chart
  $scope.chart = "groundHumidity";
  
  $scope.changeChart = function(newChartType) {
    $scope.chart = newChartType;
    console.log(newChartType);
  };

  $scope.refresh();
});

/*  
 *  Plantissime Web Client 
 *
 *  Title       :  PlantsController
 *  Description :
 *  Year        :  2015
 */
planti.controllers.controller('PlantsController', function ($scope, $http) {
  $http.get('/api/plants?filter[include]=classification').success(function(data) {
    $scope.plants = data;
  });
  
  $scope.onPlantCreated = function(plant) {
    $http.get('/api/plants?filter[include]=classification').success(function(data) {
      $scope.plants = data;
    });
  };
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  SensorsController
 *  Description :
 *  Year        :  2015
 */
planti.controllers.controller('SensorsController', function ($scope, $http, Sensor) {
  var loadSensors = function() {
    $scope.loading = true;
    
    var date = new Date()
    date.setDate(date.getDate()-7);
    //Sensor.find({ filter: { include: ['targets', { relation: 'measures', scope: { where: { type: 'power' } } }] } }).$promise.then(function(results) {
    Sensor.find({ filter: { include: 'targets' } }).$promise.then(function(results) {
      console.log(results);
      $scope.sensors = results;
      $scope.loading = false;
    });
  };
  
  $scope.enablePowerChart = function() {
    $('.ui.accordion').accordion();
  };
  
  loadSensors();
  
  $scope.onSensorCreated = function(sensor) {
    loadSensors();
  };
  
  $scope.showSensor = function(sensor) {
    $scope.sensorToShow = sensor;
  };
  
  $scope.editSensor = function(sensor) {
    $scope.sensorToEdit = angular.copy(sensor);
    $http.get('/api/sensormodels/model/'+$scope.sensorToEdit.modelNumber).success(function(modelData) {
      $scope.sensorToEditModel = modelData;
      $http.get('/api/'+$scope.sensorToEditModel.targetsType+'s').success(function(targetsData) {
        $scope.sensorToEditTargets = targetsData;
        for (var i = 0; i < $scope.sensorToEdit.targets.length; i++) {
          for(var j = 0; j < $scope.sensorToEditTargets.length; j++) {
            if ($scope.sensorToEditTargets[j].id == $scope.sensorToEdit.targets[i].id) {
              $scope.sensorToEdit.targets[i] = $scope.sensorToEditTargets[j];
              console.log("match!");
              break;
            }
          }
        }
        console.log($scope.sensorToEdit, $scope.sensorToEditModel, $scope.sensorToEditTargets);
        $('#SensorEditModal').modal('show');
      });
    });
  };
  
  $scope.editSensorConfirm = function() {
    $('#SensorEditModal').modal('hide');
    $http.delete('/api/sensors/'+$scope.sensorToEdit.id+'/targets').success(function(modelData) {
      for (var i = 0; i < $scope.sensorToEdit.targets.length; i++) {
        if($scope.sensorToEdit.targets[i] != null) {
          $http.put('/api/sensors/'+$scope.sensorToEdit.id+'/targets/rel/'+$scope.sensorToEdit.targets[i].id).success(function(modelData) {
          
          });
        }
      }
    });
  };
  
  $scope.deleteSensor = function(sensor) {
    $http.delete('/api/sensors/'+sensor.id).success(function(data) {
      $scope.sensorToShow = null;
      $scope.sensors.splice($scope.sensors.indexOf(sensor),  1);
      console.log('Sensor ' + sensor.id + ' deleted');
    });
  };
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  SettingsController
 *  Description :
 *  Year        :  2015
 */
planti.controllers.controller('SettingsController', function ($scope, $http) {
  $scope.loading = true;
  
  $scope.goDevices = function() {
    $scope.tab = 'devices';
    $scope.view = 'views/sensor-list.html';
  };
  
  $scope.goSpecies = function() {
    $scope.tab = 'species';
    $scope.view = 'views/specie-list.html';
  };
  
  // Default tab
  $scope.goDevices();
});

/*  
 *  Plantissime Web Client 
 *
 *  Title       :  SpeciesController
 *  Description :
 *  Year        :  2015
 */
planti.controllers.controller('SpeciesController', function ($scope, $http) {
  $scope.loading = true;
  $http.get('/api/plantclassifications').success(function(data) {
    $scope.classifications = data;
    $scope.loading = false;
  });
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  range filter
 *  Description :
 *  Year        :  2015
 */
planti.filters.filter('range', function() {
    return function(input) {
        var lowBound, highBound;
        switch (input.length) {
        case 1:
            lowBound = 0;
            highBound = parseInt(input[0]) - 1;
            break;
        case 2:
            lowBound = parseInt(input[0]);
            highBound = parseInt(input[1]);
            break;
        default:
            return input;
        }
        var result = [];
        for (var i = lowBound; i <= highBound; i++)
            result.push(i);
        return result;
    };
});
(function(window, angular, undefined) {'use strict';

var urlBase = "/api";
var authHeader = 'authorization';

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.Probe
 * @header lbServices.Probe
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Probe` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Probe",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Probes/:id",
      { 'id': '@id' },
      {
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Probe#modelName
    * @propertyOf lbServices.Probe
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Probe`.
    */
    R.modelName = "Probe";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.SensorModel
 * @header lbServices.SensorModel
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SensorModel` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SensorModel",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/SensorModels/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#create
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SensorModel` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/SensorModels",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#upsert
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SensorModel` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/SensorModels",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#exists
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/SensorModels/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#findById
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SensorModel` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/SensorModels/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#find
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SensorModel` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/SensorModels",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#findOne
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SensorModel` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/SensorModels/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#updateAll
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/SensorModels/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#deleteById
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/SensorModels/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#count
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/SensorModels/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#prototype$updateAttributes
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - ParamModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SensorModel` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/SensorModels/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#findByModel
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `modelNumber` – `{String=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SensorModel` object.)
         * </em>
         */
        "findByModel": {
          url: urlBase + "/SensorModels/model/:modelNumber",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.SensorModel#updateOrCreate
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SensorModel` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#update
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#destroyById
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.SensorModel#removeById
         * @methodOf lbServices.SensorModel
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.SensorModel#modelName
    * @propertyOf lbServices.SensorModel
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SensorModel`.
    */
    R.modelName = "SensorModel";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Sensor
 * @header lbServices.Sensor
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Sensor` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Sensor",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Sensors/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Sensor#prototype$__findById__measures
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Find a related item by id for measures.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for measures
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "prototype$__findById__measures": {
          url: urlBase + "/Sensors/:id/measures/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#prototype$__destroyById__measures
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Delete a related item by id for measures.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for measures
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__measures": {
          url: urlBase + "/Sensors/:id/measures/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#prototype$__updateById__measures
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Update a related item by id for measures.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for measures
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "prototype$__updateById__measures": {
          url: urlBase + "/Sensors/:id/measures/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Sensor.targets.findById() instead.
        "prototype$__findById__targets": {
          url: urlBase + "/Sensors/:id/targets/:fk",
          method: "GET"
        },

        // INTERNAL. Use Sensor.targets.destroyById() instead.
        "prototype$__destroyById__targets": {
          url: urlBase + "/Sensors/:id/targets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Sensor.targets.updateById() instead.
        "prototype$__updateById__targets": {
          url: urlBase + "/Sensors/:id/targets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Sensor.targets.link() instead.
        "prototype$__link__targets": {
          url: urlBase + "/Sensors/:id/targets/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Sensor.targets.unlink() instead.
        "prototype$__unlink__targets": {
          url: urlBase + "/Sensors/:id/targets/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Sensor.targets.exists() instead.
        "prototype$__exists__targets": {
          url: urlBase + "/Sensors/:id/targets/rel/:fk",
          method: "HEAD"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#prototype$__get__measures
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Queries measures of Sensor.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "prototype$__get__measures": {
          isArray: true,
          url: urlBase + "/Sensors/:id/measures",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#prototype$__create__measures
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Creates a new instance in measures of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "prototype$__create__measures": {
          url: urlBase + "/Sensors/:id/measures",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#prototype$__delete__measures
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Deletes all measures of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__measures": {
          url: urlBase + "/Sensors/:id/measures",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#prototype$__count__measures
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Counts measures of Sensor.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__measures": {
          url: urlBase + "/Sensors/:id/measures/count",
          method: "GET"
        },

        // INTERNAL. Use Sensor.targets() instead.
        "prototype$__get__targets": {
          isArray: true,
          url: urlBase + "/Sensors/:id/targets",
          method: "GET"
        },

        // INTERNAL. Use Sensor.targets.create() instead.
        "prototype$__create__targets": {
          url: urlBase + "/Sensors/:id/targets",
          method: "POST"
        },

        // INTERNAL. Use Sensor.targets.destroyAll() instead.
        "prototype$__delete__targets": {
          url: urlBase + "/Sensors/:id/targets",
          method: "DELETE"
        },

        // INTERNAL. Use Sensor.targets.count() instead.
        "prototype$__count__targets": {
          url: urlBase + "/Sensors/:id/targets/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#create
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/Sensors",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#upsert
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/Sensors",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#exists
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/Sensors/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#findById
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/Sensors/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#find
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/Sensors",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#findOne
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/Sensors/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#updateAll
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/Sensors/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#deleteById
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/Sensors/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#count
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/Sensors/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#prototype$updateAttributes
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/Sensors/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sensor#receive
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{String=}` - 
         */
        "receive": {
          url: urlBase + "/Sensors/receive",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Sensor#updateOrCreate
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sensor` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Sensor#update
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Sensor#destroyById
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Sensor#removeById
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Sensor#modelName
    * @propertyOf lbServices.Sensor
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Sensor`.
    */
    R.modelName = "Sensor";

    /**
     * @ngdoc object
     * @name lbServices.Sensor.targets
     * @header lbServices.Sensor.targets
     * @object
     * @description
     *
     * The object `Sensor.targets` groups methods
     * manipulating `Plant` instances related to `Sensor`.
     *
     * Call {@link lbServices.Sensor#targets Sensor.targets()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Sensor#targets
         * @methodOf lbServices.Sensor
         *
         * @description
         *
         * Queries targets of Sensor.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        R.targets = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::get::Sensor::targets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Sensor.targets#count
         * @methodOf lbServices.Sensor.targets
         *
         * @description
         *
         * Counts targets of Sensor.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.targets.count = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::count::Sensor::targets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Sensor.targets#create
         * @methodOf lbServices.Sensor.targets
         *
         * @description
         *
         * Creates a new instance in targets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        R.targets.create = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::create::Sensor::targets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Sensor.targets#destroyAll
         * @methodOf lbServices.Sensor.targets
         *
         * @description
         *
         * Deletes all targets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.targets.destroyAll = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::delete::Sensor::targets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Sensor.targets#destroyById
         * @methodOf lbServices.Sensor.targets
         *
         * @description
         *
         * Delete a related item by id for targets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for targets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.targets.destroyById = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::destroyById::Sensor::targets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Sensor.targets#exists
         * @methodOf lbServices.Sensor.targets
         *
         * @description
         *
         * Check the existence of targets relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for targets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        R.targets.exists = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::exists::Sensor::targets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Sensor.targets#findById
         * @methodOf lbServices.Sensor.targets
         *
         * @description
         *
         * Find a related item by id for targets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for targets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        R.targets.findById = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::findById::Sensor::targets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Sensor.targets#link
         * @methodOf lbServices.Sensor.targets
         *
         * @description
         *
         * Add a related item by id for targets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for targets
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        R.targets.link = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::link::Sensor::targets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Sensor.targets#unlink
         * @methodOf lbServices.Sensor.targets
         *
         * @description
         *
         * Remove the targets relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for targets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.targets.unlink = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::unlink::Sensor::targets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Sensor.targets#updateById
         * @methodOf lbServices.Sensor.targets
         *
         * @description
         *
         * Update a related item by id for targets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for targets
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        R.targets.updateById = function() {
          var TargetResource = $injector.get("Plant");
          var action = TargetResource["::updateById::Sensor::targets"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.PlantClassification
 * @header lbServices.PlantClassification
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `PlantClassification` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "PlantClassification",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/PlantClassifications/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#prototype$__findById__recommendations
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Find a related item by id for recommendations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - ParamModel id
         *
         *  - `fk` – `{*}` - Foreign key for recommendations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "prototype$__findById__recommendations": {
          url: urlBase + "/PlantClassifications/:id/recommendations/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#prototype$__destroyById__recommendations
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Delete a related item by id for recommendations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - ParamModel id
         *
         *  - `fk` – `{*}` - Foreign key for recommendations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__recommendations": {
          url: urlBase + "/PlantClassifications/:id/recommendations/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#prototype$__updateById__recommendations
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Update a related item by id for recommendations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - ParamModel id
         *
         *  - `fk` – `{*}` - Foreign key for recommendations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "prototype$__updateById__recommendations": {
          url: urlBase + "/PlantClassifications/:id/recommendations/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#prototype$__get__recommendations
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Queries recommendations of PlantClassification.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - ParamModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "prototype$__get__recommendations": {
          isArray: true,
          url: urlBase + "/PlantClassifications/:id/recommendations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#prototype$__create__recommendations
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Creates a new instance in recommendations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - ParamModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "prototype$__create__recommendations": {
          url: urlBase + "/PlantClassifications/:id/recommendations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#prototype$__delete__recommendations
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Deletes all recommendations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - ParamModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__recommendations": {
          url: urlBase + "/PlantClassifications/:id/recommendations",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#prototype$__count__recommendations
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Counts recommendations of PlantClassification.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - ParamModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__recommendations": {
          url: urlBase + "/PlantClassifications/:id/recommendations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#create
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/PlantClassifications",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#upsert
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/PlantClassifications",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#exists
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/PlantClassifications/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#findById
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/PlantClassifications/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#find
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/PlantClassifications",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#findOne
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/PlantClassifications/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#updateAll
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/PlantClassifications/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#deleteById
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/PlantClassifications/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#count
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/PlantClassifications/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#prototype$updateAttributes
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - ParamModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/PlantClassifications/:id",
          method: "PUT"
        },

        // INTERNAL. Use Plant.classification() instead.
        "::get::Plant::classification": {
          url: urlBase + "/Plants/:id/classification",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#updateOrCreate
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#update
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#destroyById
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.PlantClassification#removeById
         * @methodOf lbServices.PlantClassification
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.PlantClassification#modelName
    * @propertyOf lbServices.PlantClassification
    * @description
    * The name of the model represented by this $resource,
    * i.e. `PlantClassification`.
    */
    R.modelName = "PlantClassification";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Plant
 * @header lbServices.Plant
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Plant` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Plant",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Plants/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Plant#prototype$__findById__measures
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Find a related item by id for measures.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for measures
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "prototype$__findById__measures": {
          url: urlBase + "/Plants/:id/measures/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#prototype$__destroyById__measures
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Delete a related item by id for measures.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for measures
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__measures": {
          url: urlBase + "/Plants/:id/measures/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#prototype$__updateById__measures
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Update a related item by id for measures.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `fk` – `{*}` - Foreign key for measures
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "prototype$__updateById__measures": {
          url: urlBase + "/Plants/:id/measures/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Plant.classification() instead.
        "prototype$__get__classification": {
          url: urlBase + "/Plants/:id/classification",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#prototype$__get__measures
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Queries measures of Plant.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "prototype$__get__measures": {
          isArray: true,
          url: urlBase + "/Plants/:id/measures",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#prototype$__create__measures
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Creates a new instance in measures of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "prototype$__create__measures": {
          url: urlBase + "/Plants/:id/measures",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#prototype$__delete__measures
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Deletes all measures of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__measures": {
          url: urlBase + "/Plants/:id/measures",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#prototype$__count__measures
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Counts measures of Plant.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__measures": {
          url: urlBase + "/Plants/:id/measures/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#create
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/Plants",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#upsert
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/Plants",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#exists
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/Plants/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#findById
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/Plants/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#find
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/Plants",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#findOne
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/Plants/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#updateAll
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/Plants/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#deleteById
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/Plants/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#count
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/Plants/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Plant#prototype$updateAttributes
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/Plants/:id",
          method: "PUT"
        },

        // INTERNAL. Use Sensor.targets.findById() instead.
        "::findById::Sensor::targets": {
          url: urlBase + "/Sensors/:id/targets/:fk",
          method: "GET"
        },

        // INTERNAL. Use Sensor.targets.destroyById() instead.
        "::destroyById::Sensor::targets": {
          url: urlBase + "/Sensors/:id/targets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Sensor.targets.updateById() instead.
        "::updateById::Sensor::targets": {
          url: urlBase + "/Sensors/:id/targets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Sensor.targets.link() instead.
        "::link::Sensor::targets": {
          url: urlBase + "/Sensors/:id/targets/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Sensor.targets.unlink() instead.
        "::unlink::Sensor::targets": {
          url: urlBase + "/Sensors/:id/targets/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Sensor.targets.exists() instead.
        "::exists::Sensor::targets": {
          url: urlBase + "/Sensors/:id/targets/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Sensor.targets() instead.
        "::get::Sensor::targets": {
          isArray: true,
          url: urlBase + "/Sensors/:id/targets",
          method: "GET"
        },

        // INTERNAL. Use Sensor.targets.create() instead.
        "::create::Sensor::targets": {
          url: urlBase + "/Sensors/:id/targets",
          method: "POST"
        },

        // INTERNAL. Use Sensor.targets.destroyAll() instead.
        "::delete::Sensor::targets": {
          url: urlBase + "/Sensors/:id/targets",
          method: "DELETE"
        },

        // INTERNAL. Use Sensor.targets.count() instead.
        "::count::Sensor::targets": {
          url: urlBase + "/Sensors/:id/targets/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Plant#updateOrCreate
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Plant` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Plant#update
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Plant#destroyById
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Plant#removeById
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Plant#modelName
    * @propertyOf lbServices.Plant
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Plant`.
    */
    R.modelName = "Plant";


        /**
         * @ngdoc method
         * @name lbServices.Plant#classification
         * @methodOf lbServices.Plant
         *
         * @description
         *
         * Fetches belongsTo relation classification.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AbstractTarget id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `PlantClassification` object.)
         * </em>
         */
        R.classification = function() {
          var TargetResource = $injector.get("PlantClassification");
          var action = TargetResource["::get::Plant::classification"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Event
 * @header lbServices.Event
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Event` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Event",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Events/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Event#prototype$__get__target
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Fetches belongsTo relation target.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "prototype$__get__target": {
          url: urlBase + "/Events/:id/target",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#create
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/Events",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#upsert
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/Events",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#exists
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/Events/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#findById
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/Events/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#find
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/Events",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#findOne
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/Events/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#updateAll
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/Events/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#deleteById
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/Events/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#count
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/Events/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#prototype$updateAttributes
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/Events/:id",
          method: "PUT"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Event#updateOrCreate
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Event#update
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Event#destroyById
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Event#removeById
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Event#modelName
    * @propertyOf lbServices.Event
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Event`.
    */
    R.modelName = "Event";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Picture
 * @header lbServices.Picture
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Picture` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Picture",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Pictures/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Picture#getContainers
         * @methodOf lbServices.Picture
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Picture` object.)
         * </em>
         */
        "getContainers": {
          isArray: true,
          url: urlBase + "/Pictures",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Picture#getContainer
         * @methodOf lbServices.Picture
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Picture` object.)
         * </em>
         */
        "getContainer": {
          url: urlBase + "/Pictures/:container",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Picture#getFiles
         * @methodOf lbServices.Picture
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Picture` object.)
         * </em>
         */
        "getFiles": {
          isArray: true,
          url: urlBase + "/Pictures/:container/files",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Picture#getFile
         * @methodOf lbServices.Picture
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Picture` object.)
         * </em>
         */
        "getFile": {
          url: urlBase + "/Pictures/:container/files/:file",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Picture#removeFile
         * @methodOf lbServices.Picture
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "removeFile": {
          url: urlBase + "/Pictures/:container/files/:file",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Picture#upload
         * @methodOf lbServices.Picture
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "upload": {
          url: urlBase + "/Pictures/:container/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Picture#download
         * @methodOf lbServices.Picture
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "download": {
          url: urlBase + "/Pictures/:container/download/:file",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Picture#modelName
    * @propertyOf lbServices.Picture
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Picture`.
    */
    R.modelName = "Picture";


    return R;
  }]);


module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.rememberMe = undefined;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    }

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      var key = propsPrefix + name;
      if (value == null) value = '';
      storage[key] = value;
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {

          // filter out non urlBase requests
          if (config.url.substr(0, urlBase.length) !== urlBase) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 } },
              status: 401,
              config: config,
              headers: function() { return undefined; }
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        }
      }
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
    };

    this.$get = ['$resource', function($resource) {
      return function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };
    }];
  });

})(window, window.angular);

planti.services.factory('Plants', ['$resource',
  function($resource){
    return $resource('plants.json', {}, {
      query: {method:'GET', params:{phoneId:'phones'}, isArray:true}
    });
  }]);
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  plantChart directive
 *  Description :
 *  Year        :  2015
 */
planti.directives.directive('plantChart', function($http, $filter) {

  function link (scope, element, attrs) {
    
    scope.changePeriod = function (newPeriod) {
      scope.period = newPeriod;
    }
    scope.changeChart = function (newPeriod, newStyle) {
      scope.period = newPeriod;
      scope.style = newStyle;
    }
    
    scope.$watchGroup(['plantId', 'measureType', 'period', 'style'], function () {
      scope.loading = true;
      scope.isEmpty = true;
      if(scope.plantId != null) {
        scope.key = 'chart' + scope.plantId + '' + scope.measureType + '' + scope.period;
        console.log(scope.key);
        
        var date = new Date();

        if(scope.style == 'line') {
          console.log('LINE');
          switch (scope.period) {
           case 'day':
              date.setDate(date.getDate()-1);
              break;   
              
            case 'week':
              date.setDate(date.getDate()-7);
              break;
              
            case 'month':
              date.setMonth(date.getMonth()-1);
              break;   

            default:
              break;
          }
          // Add measures
          $http.get('/api/plants/' + scope.plantId + '/measures?filter[where][and][0][type]=' + scope.measureType + '&filter[where][and][1][time][gt]=' + date.toJSON()).success(function(data) {
            scope.chartLabels = [];
            scope.chartSeries = [scope.measureType];
            scope.chartData = [[]];
            scope.chartColours = [];
            scope.chartTimes = [];
            var previousTime = new Date(0);
            
            // For each measures
            for(var i = 0; i < data.length; i++) {
              
              scope.chartTimes.push(new Date(data[i].time).toLocaleString());
              
              // If new day
              if(previousTime.getDate() != new Date(data[i].time).getDate() | (i+1==data.length)) {
                
                previousTime = new Date(data[i].time);
                // Add day as label
                scope.chartLabels.push(previousTime.toLocaleDateString());
              }
              else {
                // Add a blank label
                scope.chartLabels.push('');
              }
              
              // Add value
              scope.chartData[0].push(data[i].value);
              
              scope.isEmpty = false;
            }
            // Add color
            scope.chartColours.push('#4D5360');
            
            // Add recommendations
            if(scope.recommendations != null) {
              for(var i = 0; i < scope.recommendations.length; i++) {
                if(scope.recommendations[i].measureType == scope.measureType) {
                  scope.chartSeries.push(scope.recommendations[i].type + ' recommendation');
                  var recData = [];
                  for(var j = 0; j < scope.chartData[0].length; j++) {
                    recData.push(scope.recommendations[i].value);
                  }
                  scope.chartData.push(recData);
                  
                  // Add color
                  switch (scope.recommendations[i].type) {
                    case "min":
                    case "max":
                      scope.chartColours.push('#F7464A');
                      break;
                      
                    case "average":
                      scope.chartColours.push('#46BFBD');
                      break;
                  
                    default:
                      break;
                  }
                }
              }
            }
              scope.onClick = function (points, evt) {
                console.log(points, evt);
              };
              
              scope.loading = false;
            });  
          }
          else if(scope.style == 'bar') {
            
            console.log('BAR');
            var by = 'day';
            var end = new Date();
            switch (scope.period) {
              case 'day':
                by = 'hour';
                date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);
                end = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 999);
                break;   
              case 'week':
                by = 'day';
                date = new Date(date.getFullYear(), date.getMonth(), date.getDate()-7, 0, 0, 0, 0);
                break;
              case 'month':
                by = 'day';
                date = new Date(date.getFullYear(), date.getMonth()-1, 0, 0, 0, 0, 0);
                break;   
            
              default:
                break;
            }
            // Add averages
            $http.get('/api/plants/' + scope.plantId + '/averages?type=' + scope.measureType + '&since=' + date.toJSON()+'&by=' + by).success(function(averages) {
              var byDate = [];
              for (var index = 0; index < averages.length; index++) {
                var average = averages[index];
                switch (by) {
                  case 'hour':
                    byDate[$filter('date')(average.date, 'MMM d, h a')] = average.value;
                    break;
                
                  case 'day':
                    byDate[$filter('date')(average.date, 'MMM d')] = average.value;
                    break;
                
                  default:
                    break;
                }
                
                scope.isEmpty = false;
              }
              
              
              scope.chartLabels = [];
              scope.chartSeries = [scope.measureType];
              scope.chartData = [[]];
              var label = "";
              while(date <= end) {
                switch (by) {
                  case 'hour':
                    date.setHours(date.getHours()+1);
                    label = $filter('date')(date, 'MMM d, h');
                    break;
                  case 'day':
                    date.setDate(date.getDate()+1);
                    label = $filter('date')(date, 'MMM d');
                    break;
                }
                if(byDate[label] == null) {
                  scope.chartData[0].push(0);
                }
                else {
                  scope.chartData[0].push(byDate[label]);
                }
                scope.chartLabels.push(label);
              }
             
              scope.loading = false;
            });
          }
          
          console.log(scope.chartColours);
      }  
    });
  }
  
  return {
    restrict: 'E',
    scope: {
			plantId: '=plant',
      measureType: '=type',
      period: '=period',
      style: '=style',
      recommendations: '=recommendations'
    },
    link: link,
    templateUrl: 'views/plant-chart.html'
  };
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  plantCreate directive
 *  Description :
 *  Year        :  2015
 */
planti.directives.directive('plantCreate', function($http) {

  function link (scope, element, attrs) {
     
    scope.openModal = function() {
      scope.plant = null;
      $http.get('/api/plantclassifications').success(function(data) {
        console.log(data);
        scope.plantClasses = data;
        $('#PlantCreateForm').modal('show');
      });
    };
    
    scope.confirmCreate = function(plant) {
      plant.type = "Plant";
      $http.post('/api/plants', plant).success(function(data) {
        $('#PlantCreateForm').modal('hide');
        scope.callback(data);
        scope.plant = null;
        scope.plantClasses = null;
      });
    };
    
    scope.cancelCreate = function() {
      console.log('cancelCreate');
      scope.plant = null;
      scope.plantClasses = null;
      scope.callback(null);
    };
  }
  
  return {
    restrict: 'E',
    scope: {
      buttonLabel: '=label',
      callback: '=callback'
    },
    link: link,
    templateUrl: 'views/plant-create.html'
  };
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  plantEdit directive
 *  Description :
 *  Year        :  2015
 */
planti.directives.directive('plantEdit', function($http, Plant) {

  function link (scope, element, attrs) {

    scope.actionOpen = function() {
      console.log('plantEdit', 'actionOpen', scope.plant);
      scope.plant = null;
      scope.isNewPlant = true;
      if(scope.plantModel != null) {
        scope.isNewPlant = false;
        scope.plant = angular.copy(scope.plantModel, scope.plant);
      }
      
      $http.get('/api/plantclassifications').success(function(data) {
        console.log('scope.plantClasses', data);
        scope.plantClasses = data;
        $('#PlantEditForm').modal('show');
      });
    };
    
    scope.actionConfirm = function(plant) {
      console.log('plantEdit', 'actionConfirm');
      if(scope.isNewPlant) {
        plant.type = "Plant";
        $http.post('/api/plants', plant).success(function(data) {
          $('#PlantEditForm').modal('hide');
          if(scope.callback) {
            scope.callback(data);
          }
        });
      }
      else {
        $http.put('/api/plants/'+plant.id, plant).success(function(data) {
          $('#PlantEditForm').modal('hide');
          if(scope.callback) {
            scope.callback(data);
          }
        });
      }
    };
    
    scope.actionCancel = function() {
      console.log('plantEdit', 'actionCancel', scope.plant, scope.plantClasses, scope.backup);
      scope.plant = scope.backup;
      scope.plantClasses = null;
      if(scope.callback) {
        scope.callback(null);
      }
    };
    
    $('#'+scope.onClickId).click(scope.actionOpen);
  }
  
  return {
    restrict: 'E',
    scope: {
      callback: '=?callback',
      plantModel: '=plantModel',
      onClickId: '=onClickId'
    },
    link: link,
    templateUrl: 'views/plant-edit.html'
  };
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  plChart directive
 *  Description :
 *  Year        :  2015
 */
planti.directives.directive('plChart', function($http) {

  function link (scope, element, attrs) {
    console.log(scope);
    scope.changePeriod = function (newPeriod) {
      scope.period = newPeriod;
    }
    
    scope.$watchGroup(['targetType', 'targetId', 'measureType', 'period'], function () {
      scope.loading = true;
  		console.log(scope.targetId);
      if(scope.targetId != null && scope.targetType != null) {
        scope.key = 'chart' + scope.targetType + '' + scope.targetId + '' + scope.measureType + '' + scope.period;
        console.log(scope.key);
        
        var date = new Date();
        switch (scope.period) {
          case 'week':
            date.setDate(date.getDate()-7);
            break;
          case 'month':
            date.setMonth(date.getMonth()-1);
            break;   
        
          default:
            break;
        }
        
        // Add measures
        $http.get('/api/' + scope.targetType + 's/' + scope.targetId + '/measures?filter[where][and][0][type]=' + scope.measureType + '&filter[where][and][1][time][gt]=' + date.toJSON()).success(function(data) {
          console.log(data);
          scope.chartLabels = [];
          scope.chartSeries = [scope.measureType];
          scope.chartData = [[]];
  				
          scope.isEmpty = true;
          // For each measures
          for(var i = 0; i < data.length; i++) {
            
            // Add day as label
            scope.chartLabels.push(new Date(data[i].time).toLocaleString());
  
            // Add value
            scope.chartData[0].push(data[i].value);
            
            scope.isEmpty = false;
          }
          
          console.log(scope);
          
          scope.onClick = function (points, evt) {
            console.log(points, evt);
          };
          
          scope.loading = false;
        });  
      }  
    });
  }
  
  return {
    restrict: 'E',
    scope: {
			targetType: '=targetType',
			targetId: '=targetId',
      measureType: '=type',
      period: '=period'
    },
    link: link,
    templateUrl: 'views/pl-chart.html'
  };
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  sensorCreate directive
 *  Description :
 *  Year        :  2015
 */
planti.directives.directive('sensorCreate', function($http) {
  
  function link ($scope, element, attrs) {
      // Step 1 : Get sensor model
      $scope.sensorCreateStep1 = function() {
        // Initialize
        $scope.sensor = null;
        $scope.sensorModel = null;
        
        $http.get('/api/sensormodels').
          success(function(data) {
            $scope.sensorModels = data;
            $('#SensorCreateStep1').modal('show');
          }).
          error(function(data, status, headers, config) {
            $scope.error = data.error;
            $('#SensorCreateError').modal('show');
          });
      };
      
      // Step 2 : Get specific sensor data
      $scope.sensorCreateStep2 = function() {
        $('#SensorCreateStep1').modal('hide');
        $http.get('/api/sensormodels/model/'+$scope.sensor.modelNumber).
          success(function(data) {
            $scope.sensorModel = data;
            // Initialize table id
            $scope.selectedTargets = new Array();
            for(var i = 0; i < $scope.sensorModel.targetsCount; i++)
            {
              $scope.selectedTargets.push({id:"0"});
            }
            // Get possible targets
            $http.get('/api/'+$scope.sensorModel.targetsType+'s').success(function(data) {
              $scope.targets = data;
            });
            $('#SensorCreateStep2').modal('show');
          }).
          error(function(data, status, headers, config) {
            $scope.error = data.error;
            $('#SensorCreateError').modal('show');
          });
      };
      
      // Step 3 : Create
      $scope.sensorCreateStep3 = function() {
    
        $http.post('/api/sensors', $scope.sensor).success(function(data) {
          console.log($scope.sensors);
          for(var i = 0; i < $scope.sensorModel.targetsCount; i++) {
            if($scope.selectedTargets[i].id != 0) {
              $http.put('/api/sensors/'+data.id+'/targets/rel/'+$scope.selectedTargets[i].id, {sensorId: data.id, targetId:$scope.selectedTargets[i].id})
                .success(function(data2) {
                  if(data.targets == null) {
                    data.targets = [];
                  }
                  data.targets.push(data2);
                  $scope.callback(data);
                });
            }
          }
          
          $('#SensorCreateStep2').modal('hide');
          if($scope.callback != null) {
            $scope.callback(data);
          }
        });
      };
  }
  
  return {
    restrict: 'E',
    scope: {
			buttonDisplay: '=button',
      label: '=label',
      callback: '=callback'
    },
    link: link,
    templateUrl: 'views/sensor-create.html'
  };
});
/*  
 *  Plantissime Web Client 
 *
 *  Title       :  sensorEditForm directive
 *  Description :
 *  Year        :  2015
 */
planti.directives.directive('sensorEditForm', function($http) {
  
  return {
    restrict: 'E',
    scope: {
			sensor: '=sensor',
      targets: '=targets',
      model: '=model'
    },
    templateUrl: 'views/sensor-edit-form.html'
  };
});